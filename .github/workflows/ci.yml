name: C++

on:
  pull_request:
  merge_group:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 3
  CTEST_PARALLEL_LEVEL: 3
  GUROBI_VERSION_SHORT: "10.0"
  GUROBI_VERSION: "10.0.2"
  GUROBI_VERSION_FOLDER: "gurobi1002"

jobs:
  cpp-tests:
    name: Tests ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          #- { os: ubuntu-latest, toolchain: "" }
          #- { os: macos-latest, toolchain: "" }
          - { os: windows-latest, toolchain: "-T ClangCl" }
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: setup-gurobi-license
        id: write-license
        env:
          GUROBI_LICENSE: ${{ secrets.GUROBI_LICENSE   }}
        run: |
          echo "$GUROBI_LICENSE" > $PWD/gurobi.lic
          echo "GRB_LICENSE_FILE=$PWD/gurobi.lic" >> $GITHUB_ENV
      - if: runner.os == 'Linux'
        name: download-gurobi-linux
        env:
          GUROBI_FILE: gurobi${{ env.GUROBI_VERSION }}_linux64.tar.gz
        run: |
          wget https://packages.gurobi.com/${{ env.GUROBI_VERSION_SHORT }}/${{ env.GUROBI_FILE }}
          tar -xvzf ${{ env.GUROBI_FILE }}
      - if: runner.os == 'macOS'
        name: download-gurobi-mac
        env:
          GUROBI_FILE: gurobi${{ env.GUROBI_VERSION }}_macos_universal2.pkg
        run: |
          wget https://packages.gurobi.com/${{ env.GUROBI_VERSION_SHORT }}/${{ env.GUROBI_FILE }}
          sudo installer -pkg ${{ env.GUROBI_FILE }} -target /
      - if: runner.os == 'Windows'
        name: download-gurobi-windows
        shell: powershell
        env:
          GUROBI_FILE: Gurobi-${{ env.GUROBI_VERSION }}-win64.msi
        run: |
          wget https://packages.gurobi.com/${{ env.GUROBI_VERSION_SHORT }}/${{ env.GUROBI_FILE }} -OutFile ${{ env.GUROBI_FILE }}
          msiexec.exe /a ${{ env.GUROBI_FILE }} /qb /L*! install.log TARGETDIR=$PWD/gurobi_tmp
          Start-Sleep -s 60
          ls $PWD
          cat install.log

      # - name: cache-gurobi
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       Gurobi-10.0.2-win64.msi
      #       gurobi10.0.2_macos_universal2.pkg
      #       gurobi10.0.2_linux64.tar.gz
      #     key: gurobi

      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON ${{ matrix.config.toolchain }}
      - name: Build
        run: cmake --build build --config Release
      - name: Test
        run: ctest -C Release --output-on-failure --test-dir build --repeat until-pass:3 --timeout 300

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: setup-gurobi-license
        id: write-license
        env:
          GUROBI_LICENSE: ${{ secrets.GUROBI_LICENSE   }}
        run: |
          echo "$GUROBI_LICENSE" > $PWD/gurobi.lic
          echo "GRB_LICENSE_FILE=$PWD/gurobi.lic" >> $GITHUB_ENV
      - name: download-gurobi-linux
        env:
          GUROBI_FILE: gurobi${{ env.GUROBI_VERSION }}_linux64.tar.gz
        run: |
          wget https://packages.gurobi.com/${{ env.GUROBI_VERSION_SHORT }}/${{ env.GUROBI_FILE }}
          tar -xvzf ${{ env.GUROBI_FILE }}
      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON -DENABLE_COVERAGE=ON
      - name: Build
        run: cmake --build build --config Debug --target rail_test
      - name: Test
        run: ctest -C Debug --output-on-failure --test-dir build --repeat until-pass:3 --timeout 300
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          gcov: true
          gcov_ignore: "extern/**/*"
          token: ${{ secrets.CODECOV_TOKEN }}
